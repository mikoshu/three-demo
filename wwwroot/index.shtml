<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>canvas</title>
	<style>
		canvas{
			width:500px;
			height:500px;
		}
	</style>
</head>
<body>
	<canvas class="canvas"></canvas>
</body>
<script>

  var canvas = document.querySelector('canvas'),
      ctx = canvas.getContext('2d')
  canvas.width = 500;
  canvas.height = 500;
  ctx.lineWidth = .3;
  ctx.strokeStyle = (new Color(150)).style;

  var mousePosition = {
    x: 30 * canvas.width / 100,
    y: 30 * canvas.height / 100
  };

  var dots = {
    nb: 500,
    distance: 40,
    d_radius: 200,
    array: []
  };

  function colorValue(min) {
    return Math.floor(Math.random() * 255 + min);
  }
  
  function createColorStyle(r,g,b) {
    return 'rgba(' + r + ',' + g + ',' + b + ', 0.8)';
  }
  
  function mixComponents(comp1, weight1, comp2, weight2) {
    return (comp1 * weight1 + comp2 * weight2) / (weight1 + weight2);
  }
  
  function averageColorStyles(dot1, dot2) {
    var color1 = dot1.color,
        color2 = dot2.color;
    
    var r = mixComponents(color1.r, dot1.radius, color2.r, dot2.radius),
        g = mixComponents(color1.g, dot1.radius, color2.g, dot2.radius),
        b = mixComponents(color1.b, dot1.radius, color2.b, dot2.radius);
    return createColorStyle(Math.floor(r), Math.floor(g), Math.floor(b));
  }
  
  function Color(min) {
    min = min || 0;
    this.r = colorValue(min);
    this.g = colorValue(min);
    this.b = colorValue(min);
    this.style = createColorStyle(this.r, this.g, this.b);
  }

  function Dot(){

    this.x = Math.random() * canvas.width;
    this.y = Math.random() * canvas.height;

    this.vx = -.05 + Math.random()*0.3;
    this.vy = -.05 + Math.random()*0.3;

    this.radius = Math.random() * 2;

    this.color = new Color();
    this.connect = 0;
  }

  Dot.prototype = {
    draw: function(){
      ctx.beginPath();
      ctx.fillStyle = this.color.style;
      ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);
      ctx.fill();
    }
  };

  function createDots(){
    for(i = 0; i < dots.nb; i++){
    	var d = new Dot();
    	var x = Math.pow(d.x-canvas.width/2,2)
        var y = Math.pow(d.y-canvas.height/2,2)
    	if(Math.sqrt(x+y) < dots.d_radius){
    		dots.array.push(d);
    	}
    }
    dots.len = dots.array.length
  }

  function moveDots() {
    for(i = 0; i <dots.len; i++){

      var dot = dots.array[i];

      // if(dot.y < 0 || dot.y > canvas.height){
      //   dot.vx = dot.vx;
      //   dot.vy = - dot.vy;
      // }
      // else if(dot.x < 0 || dot.x > canvas.width){
      //   dot.vx = - dot.vx;
      //   dot.vy = dot.vy;
      // }
      var x = Math.pow(dot.x-canvas.width/2,2)
      var y = Math.pow(dot.y-canvas.height/2,2)
      if(Math.sqrt(x+y) > dots.d_radius){
      	dot.vx = -dot.vx;
      	dot.vy = -dot.vy;
      }
      dot.x += dot.vx;
      dot.y += dot.vy;
    }
  }

  function connectDots() {
    for(i = 0; i < dots.len; i++){
      for(j = 0; j < dots.len; j++){
        i_dot = dots.array[i];
        j_dot = dots.array[j];

        if((i_dot.x - j_dot.x) < dots.distance && (i_dot.y - j_dot.y) < dots.distance && (i_dot.x - j_dot.x) > - dots.distance && (i_dot.y - j_dot.y) > - dots.distance){
          // if((i_dot.x - mousePosition.x) < dots.d_radius && (i_dot.y - mousePosition.y) < dots.d_radius && (i_dot.x - mousePosition.x) > - dots.d_radius && (i_dot.y - mousePosition.y) > - dots.d_radius){
          //   ctx.beginPath();
          //   ctx.strokeStyle = averageColorStyles(i_dot, j_dot);
          //   ctx.moveTo(i_dot.x, i_dot.y);
          //   ctx.lineTo(j_dot.x, j_dot.y);
          //   ctx.stroke();
          //   ctx.closePath();
          // }
          var x = Math.pow(i_dot.x-canvas.width/2,2)
          var y = Math.pow(i_dot.y-canvas.height/2,2)
          var x2 = Math.pow(j_dot.x-canvas.width/2,2)
          var y2 = Math.pow(j_dot.y-canvas.height/2,2)
          if(Math.sqrt(x+y) < dots.d_radius && Math.sqrt(x2+y2)<dots.d_radius){
          	if(i_dot.connect < 5 && j_dot.connect < 5){
          		ctx.beginPath();
	            ctx.strokeStyle = averageColorStyles(i_dot, j_dot);
	            ctx.moveTo(i_dot.x, i_dot.y);
	            ctx.lineTo(j_dot.x, j_dot.y);
	            ctx.stroke();
	            ctx.closePath();
	            i_dot.connect++;
	            j_dot.connect++;
          	}
            
          }else{
          	i_dot.connect = 0;
	        j_dot.connect = 0;
          }
        }else{
        	i_dot.connect--;
	        j_dot.connect--;
        }
      }
    }
  }

  function drawDots() {
    for(i = 0; i < dots.len; i++){
      var dot = dots.array[i];
      dot.draw();
    }
  }

  function animateDots() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    moveDots();
    connectDots();
    drawDots();

    requestAnimationFrame(animateDots);	
  }

  canvas.addEventListener('mousemove', function(e){
    mousePosition.x = e.pageX;
    mousePosition.y = e.pageY;
  });

  canvas.addEventListener('mouseleave', function(e){
    mousePosition.x = canvas.width / 2;
    mousePosition.y = canvas.height / 2;
  });

  createDots();
  requestAnimationFrame(animateDots);	

</script>
</html>